#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;

uniform float time;

varying vec3 worldPos;
varying vec3 localPos;

vec2 Rotate2D(vec2 vec_in, float angle) {
 vec2 vec_out;
 vec_out.x = cos(angle)*vec_in.x - sin(angle)*vec_in.y;
 vec_out.y = sin(angle)*vec_in.x + cos(angle)*vec_in.y;
 return vec_out;
}

void main()
{
  vec3 modelN=normal;
  vec3 modelX=position;
  modelX.xz = Rotate2D(modelX.xz,0.25*3.14*modelX.y*sin(40.0*time));
  modelX.yz = Rotate2D(modelX.yz,0.25*3.14*modelX.y*sin(100.0*time));
  modelX.xy = Rotate2D(modelX.xy,0.25*3.14*modelX.y*sin(10.0*time));
  modelN.xz = Rotate2D(modelN.xz,0.5*3.14*modelX.y*sin(10.0*time)); 
  modelN.yz = Rotate2D(modelN.yz,0.5*3.14*modelX.y*sin(10.0*time)); 
  modelN.xy = Rotate2D(modelN.xy,0.5*3.14*modelX.y*sin(10.0*time)); 
  
  fNormal = normalize(normalMatrix * modelN);
  vec4 pos = modelViewMatrix * vec4(modelX, 1.0);
  worldPos = pos.xyz;
  localPos = position;
  
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fNormal;
varying vec3 fPosition;

varying vec3 worldPos;
varying vec3 localPos;

void main()
{
  // Create ambient lighting that is gradiented across the surface
  vec3 baseColor = vec3(localPos.x * 0.5 + 0.5, localPos.y * 0.5 + 0.5, localPos.z * 0.5 + 0.5);
  vec3 ambient_color = 0.5 * baseColor;
  
  // Create 2 moving white specular lights
  vec3 specDir1 = vec3(-cos(time*10.0), 4.0*sin(time*20.0), sin(time*20.0) + 3.14/2.0);
  vec3 specDir2 = vec3(56.0*cos(time*20.0), 10.0, -sin(time*15.0));
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-worldPos);
  vec3 l_1 = normalize(specDir1);
  vec3 l_2 = normalize(specDir2);
  vec3 h_1 = normalize (e+l_1);
  vec3 h_2 = normalize (e+l_2);
  vec3 specCol1 = pow(max(0.0,dot(n,h_1)),32.0) * vec3(1.0, 1.0, 1.0);
  vec3 specCol2 = pow(max(0.0,dot(n,h_2)),32.0) * vec3(1.0, 1.0, 1.0);
  
  // Create 3 moving diffuse lights
  vec3 difDir1 = vec3(cos(2.0*time), 1.0, sin(15.0*time));
  vec3 difDir2 = vec3(sin(20.0*time), 1.0, sin(1.0*time));
  vec3 difDir3 = vec3(-sin(2.0*time), 1.0, -cos(1.0*time));
  float diffuse1 = pow(dot(fNormal,difDir1), 3.0);
  float diffuse2 = pow(dot(fNormal,difDir2), 10.0);
  float diffuse3 = pow(dot(fNormal,difDir3), 2.0);
  vec3 difCol1 = diffuse1 * vec3(10, 0, 0);
  vec3 difCol2 = diffuse2 * vec3(0, 0.2, 78);
  vec3 difCol3 = diffuse3 * vec3(0.1, 1.0, 0);
  
  // the color of this fragment is many lighting components combined
  gl_FragColor = vec4(ambient_color+specCol1+specCol2+difCol1+difCol2+difCol3, 1.0);  
  // discard some random parts of the model
  if(sin(50.0*localPos.x)>0.9 && sin(30.0*localPos.y)>0.1) discard;
}
 
#endif